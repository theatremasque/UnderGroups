// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UnderGroups.Infrastructure;

#nullable disable

namespace UnderGroups.Migrations.Data
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UnderGroups.Core.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("UnderGroups.Core.GroupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GroupTypes");
                });

            modelBuilder.Entity("UnderGroups.Core.LearningGroup", b =>
                {
                    b.Property<int>("UnderGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int?>("LearningGroupStudentId")
                        .HasColumnType("integer");

                    b.Property<int?>("LearningGroupUnderGroupId")
                        .HasColumnType("integer");

                    b.HasKey("UnderGroupId", "StudentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("LearningGroupUnderGroupId", "LearningGroupStudentId");

                    b.ToTable("LearningGroups");
                });

            modelBuilder.Entity("UnderGroups.Core.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("UnderGroups.Core.StudentGroup", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.HasKey("StudentId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("UnderGroups.Core.UnderGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("UnderGroups");
                });

            modelBuilder.Entity("UnderGroups.Core.LearningGroup", b =>
                {
                    b.HasOne("UnderGroups.Core.Student", "Student")
                        .WithMany("LearningGroups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderGroups.Core.UnderGroup", "UnderGroup")
                        .WithMany("LearningGroups")
                        .HasForeignKey("UnderGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderGroups.Core.LearningGroup", null)
                        .WithMany("LearningGroups")
                        .HasForeignKey("LearningGroupUnderGroupId", "LearningGroupStudentId");

                    b.Navigation("Student");

                    b.Navigation("UnderGroup");
                });

            modelBuilder.Entity("UnderGroups.Core.StudentGroup", b =>
                {
                    b.HasOne("UnderGroups.Core.Group", "Group")
                        .WithMany("StudentGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderGroups.Core.Student", "Student")
                        .WithMany("StudentGroups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UnderGroups.Core.UnderGroup", b =>
                {
                    b.HasOne("UnderGroups.Core.Group", "Group")
                        .WithMany("UnderGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderGroups.Core.GroupType", "GroupType")
                        .WithMany("UnderGroups")
                        .HasForeignKey("GroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnderGroups.Core.Student", "Student")
                        .WithMany("UnderGroups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("GroupType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UnderGroups.Core.Group", b =>
                {
                    b.Navigation("StudentGroups");

                    b.Navigation("UnderGroups");
                });

            modelBuilder.Entity("UnderGroups.Core.GroupType", b =>
                {
                    b.Navigation("UnderGroups");
                });

            modelBuilder.Entity("UnderGroups.Core.LearningGroup", b =>
                {
                    b.Navigation("LearningGroups");
                });

            modelBuilder.Entity("UnderGroups.Core.Student", b =>
                {
                    b.Navigation("LearningGroups");

                    b.Navigation("StudentGroups");

                    b.Navigation("UnderGroups");
                });

            modelBuilder.Entity("UnderGroups.Core.UnderGroup", b =>
                {
                    b.Navigation("LearningGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
